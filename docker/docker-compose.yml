services:
  auth_service_mongodb:
    image: mongo:6
    container_name: auth_db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_ROOT_AUTHSOURCE: admin
    ports:
      - "${AUTH_SERVICE_RABBITMQ_PORT}:27017"
    volumes:
      - mongo_authdb_data:/data/db
    command: --bind_ip_all --auth
    networks:
      - node-network
  user_service_mongodb:
    image: mongo:6
    container_name: users_db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_ROOT_AUTHSOURCE: admin
    ports:
      - "${USER_SERVICE_RABBITMQ_PORT}:27017"
    volumes:
      - mongo_usersdb_data:/data/db
    command: --bind_ip_all --auth
    networks:
      - node-network

  rabbitmq:
    image: rabbitmq:3.12-management
    hostname: qwipper-queues
    container_name: rabbitmq
    env_file:
        - ./.env
    restart: always
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: "${RABBITMQ_VHOST:-/}"
    volumes:
      - rabbitmq-log:/var/log/rabbitmq      
      - ./rabbitmq/init.sh:/docker-entrypoint-initdb.d/init.sh
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - node-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 5s
      timeout: 10s
      retries: 10
      
  users_service:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile.users-service
    container_name: users-service
    volumes:
      - type: bind
        source: ./qwipper-monorepo
        target: /app/qwipper-monorepo
    develop:
      watch:
        - action: rebuild
          path: ../qwipper-monorepo/services/users-service
          target: /app/qwipper-monorepo/services/users-service
    environment:
      SPRING_DEVTOOLS_RESTART_ENABLED: "true"
      SPRING_DATA_MONGODB_URI: "mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@user_service_mongodb:27017/${USER_MONGO_APP_DATABASE}?authSource=admin"
      SPRING_RABBITMQ_HOST: "rabbitmq"
      SPRING_RABBITMQ_PORT: "${RABBITMQ_PORT:-5672}"
      SPRING_RABBITMQ_USERNAME: "${RABBITMQ_USERNAME}"
      SPRING_RABBITMQ_PASSWORD: "${RABBITMQ_PASSWORD}"
      SPRING_RABBITMQ_VIRTUAL_HOST: "${RABBITMQ_VHOST:-/}"
    ports:
      - "8081:8080"
    depends_on:
      user_service_mongodb:
        condition: service_started
      rabbitmq:      
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - node-network
  
  auth_service:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile.auth-service
    container_name: auth-service
    volumes:
      - type: bind
        source: ./qwipper-monorepo
        target: /app/qwipper-monorepo
    develop:
      watch:
        - action: rebuild
          path: ../qwipper-monorepo/services/auth-service
          target: /app/qwipper-monorepo/services/auth-service
    environment:
      SPRING_DEVTOOLS_RESTART_ENABLED: "true"
      SPRING_DATA_MONGODB_URI: "mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@auth_service_mongodb:27017/${AUTH_MONGO_APP_DATABASE}?authSource=admin"
      SPRING_RABBITMQ_HOST: "rabbitmq"
      SPRING_RABBITMQ_PORT: "${RABBITMQ_PORT:-5672}"
      SPRING_RABBITMQ_USERNAME: "${RABBITMQ_USERNAME}"
      SPRING_RABBITMQ_PASSWORD: "${RABBITMQ_PASSWORD}"
      SPRING_RABBITMQ_VIRTUAL_HOST: "${RABBITMQ_VHOST:-/}"
    ports:
      - "8082:8080"
    depends_on:
      auth_service_mongodb:
        condition: service_started
      rabbitmq:      
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - node-network

volumes:
  mongo_usersdb_data:
  mongo_authdb_data:
  rabbitmq-log:
  rabbitmq-data:

  
networks:
  node-network:
    driver: bridge